
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE SavingsAccounts CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Employees CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Accounts CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/


CREATE TABLE SavingsAccounts (
    AccountID   NUMBER PRIMARY KEY,
    CustomerID  NUMBER,
    Balance     NUMBER(12,2)
);
/

CREATE TABLE Employees (
    EmployeeID   NUMBER PRIMARY KEY,
    Name         VARCHAR2(100),
    DepartmentID NUMBER,
    Salary       NUMBER(12,2)
);
/

CREATE TABLE Accounts (
    AccountID   NUMBER PRIMARY KEY,
    CustomerID  NUMBER,
    Balance     NUMBER(12,2)
);
/


INSERT INTO SavingsAccounts VALUES (101, 1, 1000);
INSERT INTO SavingsAccounts VALUES (102, 2, 2000);

INSERT INTO Employees VALUES (201, 'Alice', 10, 5000);
INSERT INTO Employees VALUES (202, 'Bob', 20, 6000);
INSERT INTO Employees VALUES (203, 'Charlie', 10, 5500);

INSERT INTO Accounts VALUES (301, 1, 5000);
INSERT INTO Accounts VALUES (302, 2, 3000);
/

COMMIT;
/

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
    UPDATE SavingsAccounts SET Balance = Balance * 1.01;
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(
    p_DepartmentID IN NUMBER,
    p_BonusPercent IN NUMBER
) IS
BEGIN
    UPDATE Employees
    SET Salary = Salary + (Salary * p_BonusPercent / 100)
    WHERE DepartmentID = p_DepartmentID;
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE TransferFunds(
    p_FromAccountID IN NUMBER,
    p_ToAccountID   IN NUMBER,
    p_Amount        IN NUMBER
) IS
    v_Balance NUMBER(12,2);
BEGIN
    SELECT Balance INTO v_Balance FROM Accounts WHERE AccountID = p_FromAccountID;
    IF v_Balance < p_Amount THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient balance in source account');
    ELSE
        UPDATE Accounts SET Balance = Balance - p_Amount WHERE AccountID = p_FromAccountID;
        UPDATE Accounts SET Balance = Balance + p_Amount WHERE AccountID = p_ToAccountID;
        COMMIT;
    END IF;
END;
/

BEGIN
    ProcessMonthlyInterest;
    UpdateEmployeeBonus(10, 10);
    TransferFunds(301, 302, 1000);
END;
/

SET SERVEROUTPUT ON;
BEGIN
    DBMS_OUTPUT.PUT_LINE('SavingsAccounts:');
    FOR rec IN (SELECT * FROM SavingsAccounts ORDER BY AccountID) LOOP
        DBMS_OUTPUT.PUT_LINE('AccountID='||rec.AccountID||', CustomerID='||rec.CustomerID||', Balance='||TO_CHAR(rec.Balance,'999999.99'));
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(CHR(10)||'Employees in Dept 10:');
    FOR rec IN (SELECT * FROM Employees WHERE DepartmentID = 10 ORDER BY EmployeeID) LOOP
        DBMS_OUTPUT.PUT_LINE('EmployeeID='||rec.EmployeeID||', Name='||rec.Name||', Salary='||TO_CHAR(rec.Salary,'999999.99'));
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(CHR(10)||'Accounts:');
    FOR rec IN (SELECT * FROM Accounts ORDER BY AccountID) LOOP
        DBMS_OUTPUT.PUT_LINE('AccountID='||rec.AccountID||', CustomerID='||rec.CustomerID||', Balance='||TO_CHAR(rec.Balance,'999999.99'));
    END LOOP;
END;
/
